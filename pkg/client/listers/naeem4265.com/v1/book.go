/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/naeem4265/custom-controller/pkg/apis/naeem4265.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BookLister helps list Books.
// All objects returned here must be treated as read-only.
type BookLister interface {
	// List lists all Books in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Book, err error)
	// Books returns an object that can list and get Books.
	Books(namespace string) BookNamespaceLister
	BookListerExpansion
}

// bookLister implements the BookLister interface.
type bookLister struct {
	indexer cache.Indexer
}

// NewBookLister returns a new BookLister.
func NewBookLister(indexer cache.Indexer) BookLister {
	return &bookLister{indexer: indexer}
}

// List lists all Books in the indexer.
func (s *bookLister) List(selector labels.Selector) (ret []*v1.Book, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Book))
	})
	return ret, err
}

// Books returns an object that can list and get Books.
func (s *bookLister) Books(namespace string) BookNamespaceLister {
	return bookNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BookNamespaceLister helps list and get Books.
// All objects returned here must be treated as read-only.
type BookNamespaceLister interface {
	// List lists all Books in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Book, err error)
	// Get retrieves the Book from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Book, error)
	BookNamespaceListerExpansion
}

// bookNamespaceLister implements the BookNamespaceLister
// interface.
type bookNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Books in the indexer for a given namespace.
func (s bookNamespaceLister) List(selector labels.Selector) (ret []*v1.Book, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Book))
	})
	return ret, err
}

// Get retrieves the Book from the indexer for a given namespace and name.
func (s bookNamespaceLister) Get(name string) (*v1.Book, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("book"), name)
	}
	return obj.(*v1.Book), nil
}
